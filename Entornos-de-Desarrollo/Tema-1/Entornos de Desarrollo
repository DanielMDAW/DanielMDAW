- Tipos de software
	- De sistema (SO, drivers): Son programas que actúan como mediador entre el usuario y el sistema, e interactúa con el hardware de manera más o menos directa.
	- De aplicacion (Navegador, edición de imágenes) : Programas que usa comúnmente el usuario que cumplen varias funciones.
	- De desarrollo (Editores, interpretes, compiladores) : Programas que permiten crear y modificar otros programas

	Firmware: Software de bajo nivel que es más cercano al hardware. Ejemplos: Los que están instalados en un microcontrolador, software que controle periféricos, etc.


- Relación entre Hardware y Software

	  - CPU: Lee y ejecuta instrucciones almacenadas en memoria RAM, así como los datos necesarios. La cpu tiene como memoria los registros (la más rapida de acceder), además de la memoria caché. Tiene una memoria caché en cada núcleo. Cada núcleo puede tener varios hilos.
	  - Disco duro: Almacena de forma permanente los archivos ejecutables y los archivos de datos.
	  - Memoria RAM: Almacena de forma temporal el código binario de los archivos ejecutables y los archivos de datos necesarios.
	  - E/S: Recoge nuevos datos desde la entrada, se muestran los resultados, se leen/guardan a disco...

- Códigos fuente, objeto y ejecutable.

   	  - Código fuente: Archivo de texto legible escrito en un lenguaje de programación. Se puede editar fácilmente
  	  - Código objeto (intermedio): archivo binario no ejecutable.
  	  - Código ejecutable: archivo binario ejecutable.
  
  	Esta explicación es solo válida para lenguajes compilados como C, C++, Java.
  	En lenguajes interpretados como PHP o JavaScript, no existe código objeto ni binario, solo código fuente.

	
3. CICLO DE LA VIDA DEL SOFTWARE

    Ingeniería del software


    Fases principales
      -Análisis (Qué necesito): definición clara de las necesidades del cliente y se especifican los requisitos que debe cumplir el software.

        Requisitos importantes:
            - Ser completa y sin omisiones
            - Ser concisa y sin trivialidades
            - Evitar ambigüedades y utilizar un lenguaje formal
            - Evitar detalles de diseño o implementación
            - Ser entendible por el cliente
            - Separar requisitos funcionales y no funcionales
            - Dividir y jerarquizar el modelo
            - Fijar criterios de validación
      
      -Diseño (Como lo vamos hacer): se proponen opciones al cliente para que elija la mas óptima a sus necesidades

         Actividades habituales en el diseño:
            - Diseño arquitectónico
            - Diseño detallado
            - Diseño de datos
            - Diseño de interfaz de usuario
      
      -Codificación (Picar código): escribir el código fuente del programa
      
      -Pruebas (Definir las pruebas y realizarlas): conseguir que funcione incorrectamente y asi descubrir los defectos
      
      -Mantenimiento (documentar, actualizar, parchear):  durante la explotación del sistema software en necesario realizar cambios ocasionales rehaciendo parte del trabajo realizado en las fases previas.

        Tipos de mantenimiento:
            - Correctivo: corrección de defectos
            - Perfectivo: mejora de la funcionalidad
            - Evolutivo: se añaden funcionalidades nuevas
            - Adaptativo. se adaptan nuevos entornos
